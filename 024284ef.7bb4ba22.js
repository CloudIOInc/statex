(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{135:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return s})),n.d(e,"rightToc",(function(){return u})),n.d(e,"default",(function(){return c}));var o=n(2),a=n(9),r=(n(0),n(169)),i={title:"Atoms"},s={id:"basic-tutorial/atoms",title:"Atoms",description:"Atoms contain the source of truth for our application state. In our todo-list, the source of truth will be an array of objects, with each object representing a todo item.",source:"@site/docs/basic-tutorial/atoms.md",permalink:"/statex/docs/basic-tutorial/atoms",editUrl:"https://github.com/CloudIOInc/statex/edit/master/website/docs/basic-tutorial/atoms.md",sidebar:"someSidebar",previous:{title:"Intro",permalink:"/statex/docs/basic-tutorial/intro"},next:{title:"Selectors",permalink:"/statex/docs/basic-tutorial/selectors"}},u=[{value:"Demo",id:"demo",children:[]}],l={rightToc:u};function c(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Atoms contain the source of truth for our application state. In our todo-list, the source of truth will be an array of objects, with each object representing a todo item."),Object(r.b)("p",null,"We'll call our list atom ",Object(r.b)("inlineCode",{parentName:"p"},"todoListAtom")," and create it using the ",Object(r.b)("inlineCode",{parentName:"p"},"atom()")," function:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const todoListAtom = atom({\n  path: ['todo', 'list'],\n  defaultValue: [],\n});\n")),Object(r.b)("p",null,"We give our atom a unique ",Object(r.b)("inlineCode",{parentName:"p"},"path")," and set the ",Object(r.b)("inlineCode",{parentName:"p"},"defaultValue")," to an empty array. To read the contents of this atom, we can use the ",Object(r.b)("inlineCode",{parentName:"p"},"useStateXValue()")," hook in our ",Object(r.b)("inlineCode",{parentName:"p"},"TodoList")," component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const ToDoList = memo(() => {\n  return (\n    <>\n      {/* <TodoListStats /> */}\n      {/* <TodoListFilters /> */}\n      <TodoItemCreator />\n      <TodoList />\n      <JSONPreview />\n    </>\n  );\n});\n")),Object(r.b)("p",null,"The commented-out components will be implemented in the sections that follow."),Object(r.b)("p",null,"To create new todo items, we need to access a setter function that will update\nthe contents of the ",Object(r.b)("inlineCode",{parentName:"p"},"todoListAtom"),". We can use the ",Object(r.b)("inlineCode",{parentName:"p"},"useStateXValueSetter()"),"\nhook to get a setter function in our ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItemCreator")," component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('');\n  const setTodoList = useStateXValueSetter(todoList);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  const onChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  );\n}\n\n// utility for creating unique Id\nlet id = 0;\nfunction getId() {\n  return id++;\n}\n")),Object(r.b)("p",null,"Notice we use the ",Object(r.b)("strong",{parentName:"p"},"updater")," form of the setter function so that we can create a new todo list based on the old todo list."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"TodoItem")," component will display the value of the todo item while allowing you to change its text and delete the item. We use ",Object(r.b)("inlineCode",{parentName:"p"},"useStateX()")," to read ",Object(r.b)("inlineCode",{parentName:"p"},"todoListAtom")," and to get a setter function that we use to update the item text, mark it as completed, and delete it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"function TodoItem({ id }: { id: number }) {\n  const text = useStateXForTextInput(['todo', 'list', ':id', 'text'], '', {\n    params: { id },\n  });\n  const isComplete = useStateXForCheckbox(\n    ['todo', 'list', ':id', 'isComplete'],\n    false,\n    { params: { id } },\n  );\n\n  const deleteItem = useStateXValueRemover(['todo', 'list', ':id'], {\n    params: { id },\n  });\n\n  return (\n    <div>\n      <input {...text} />\n      <input {...isComplete} />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n}\n")),Object(r.b)("p",null,"And with that we've got a fully functional todo list! In the next section we'll see how we can use selectors to take our list to the next level."),Object(r.b)("h2",{id:"demo"},"Demo"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),"const initialTodos = [\n  { id: 100, text: 'Learn Javascript', isComplete: true },\n  { id: 101, text: 'Learn React', isComplete: true },\n  { id: 102, text: \"Use CloudIO's StateX\" },\n  { id: 103, text: 'Launch Product' },\n];\n\nconst todoList = atom({\n  path: ['todo', 'list'],\n  defaultValue: initialTodos,\n});\n\nfunction ToDoList() {\n  return (\n    <>\n      {/* <TodoListStats />\n      <TodoListFilters /> */}\n      <TodoItemCreator />\n      <TodoList />\n      {/* <JSONPreview /> */}\n    </>\n  );\n}\n\nfunction TodoList() {\n  const todos = useStateXValue(todoList);\n\n  return (\n    <>\n      {todos.map((item, index) => (\n        <TodoItem index={index} key={item.id} />\n      ))}\n    </>\n  );\n}\n\nfunction TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('');\n  const setTodoList = useStateXValueSetter(todoList);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  const onChange = ({ target: { value } }) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  );\n}\n\nfunction TodoItem({ index }) {\n  const text = useStateXForTextInput(['todo', 'list', ':index', 'text'], '', {\n    params: { index },\n  });\n  const isComplete = useStateXForCheckbox(\n    ['todo', 'list', ':index', 'isComplete'],\n    false,\n    { params: { index } },\n  );\n\n  const deleteItem = useStateXValueRemover(['todo', 'list', ':index'], {\n    params: { index },\n  });\n\n  return (\n    <div>\n      <input {...text} />\n      <input {...isComplete} />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n}\n\nlet id = 104;\nfunction getId() {\n  return id++;\n}\n\nreturn <ToDoList />;\n")))}c.isMDXComponent=!0},169:function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return b}));var o=n(0),a=n.n(o);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=a.a.createContext({}),c=function(t){var e=a.a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},d=function(t){var e=c(t.components);return a.a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},m=a.a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,i=t.parentName,l=u(t,["components","mdxType","originalType","parentName"]),d=c(n),m=o,b=d["".concat(i,".").concat(m)]||d[m]||p[m]||r;return n?a.a.createElement(b,s(s({ref:e},l),{},{components:n})):a.a.createElement(b,s({ref:e},l))}));function b(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);